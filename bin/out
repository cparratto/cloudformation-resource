#!/bin/bash

set -eu
set -o pipefail

exec 3>&1 # use fd 3 for script output
exec 1>&2 # send normal stdout to stderr for logging

WORKING_DIR=$1
echo "WORKING_DIR = $WORKING_DIR"

# read stdin
jq -M -S . <&0 > /tmp/input

if [ "$(jq -r '.params.quiet' /tmp/input)" != "true" ]; then
  set -x
  cat /tmp/input
fi

# check that the input is valid json
CLOUDFORMATION_FILE=$WORKING_DIR/$(jq -r .params.cloudformation_file < /tmp/input)
jq -C . < $CLOUDFORMATION_FILE

#check optional policy input
POLICY_FILE_NAME=$(jq -r '.params.policy_file // empty' < /tmp/input)
if [ -z "$POLICY_FILE_NAME" ]; then
  STACK_POLICY_ARG=""
else
  POLICY_FILE=$WORKING_DIR/$POLICY_FILE_NAME
  jq -C . < $POLICY_FILE
  jq -S . < $POLICY_FILE > $POLICY_FILE.sorted
  POLICY_FILE_CONTENTS=$(jq -r -c -M . < $POLICY_FILE.sorted)
  STACK_POLICY_ARG="--stack-policy-body $POLICY_FILE_CONTENTS"
fi

# load AWS crds
export AWS_ACCESS_KEY_ID=$(jq -r .source.aws_access_key < /tmp/input)
export AWS_SECRET_ACCESS_KEY=$(jq -r .source.aws_secret_key < /tmp/input)
export AWS_DEFAULT_REGION=$(jq -r .source.aws_region < /tmp/input)

# determine stack action
OLD_STACK_CONFIG=/tmp/$$-old.json
STACK_NAME=$(jq -r .params.stack_name < /tmp/input)
if aws cloudformation get-template --stack-name $STACK_NAME > $OLD_STACK_CONFIG; then
  STACK_ACTION=update-stack
else
  STACK_ACTION=create-stack
fi

# sort the cloudformation files
jq -S .TemplateBody < $OLD_STACK_CONFIG > $OLD_STACK_CONFIG.sorted
jq -S . < $CLOUDFORMATION_FILE > $CLOUDFORMATION_FILE.sorted
diff $OLD_STACK_CONFIG.sorted $CLOUDFORMATION_FILE.sorted || true

# check existing policy
if [ ! -z "$POLICY_FILE_NAME" ]; then
  OLD_STACK_POLICY=/tmp/$$-old-policy.json
  if aws cloudformation get-stack-policy --stack-name $STACK_NAME | jq -r .StackPolicyBody > $OLD_STACK_POLICY; then
    jq -S . < $OLD_STACK_POLICY > $OLD_STACK_POLICY.sorted
    diff $OLD_STACK_POLICY.sorted $POLICY_FILE.sorted || true
  fi
fi

# upload the cloudformation json using the aws cli
CAPABILITIES=$(jq -r '.params.capabilities // empty' < /tmp/input)
if [ -z "$CAPABILITIES" ]; then
  echo "will be missing capabilities"
  CAPABILITIES_ARG=""
else
  echo "should have capbilities" 
  CAPABILITIES_ARG="--capabilities=$CAPABILITIES"
fi

if (! cmp $OLD_STACK_CONFIG.sorted $CLOUDFORMATION_FILE.sorted) || ([ ! -z "$POLICY_FILE_NAME" ] && ! cmp $OLD_STACK_POLICY.sorted $POLICY_FILE.sorted); then
  if ! cmp $OLD_STACK_CONFIG.sorted $CLOUDFORMATION_FILE.sorted; then
    aws cloudformation $STACK_ACTION \
      $CAPABILITIES_ARG \
      --stack-name $STACK_NAME \
      $STACK_POLICY_ARG \
      --template-body file://$CLOUDFORMATION_FILE.sorted
    boosh watch --name $STACK_NAME
  else
    aws cloudformation set-stack-policy \
      --stack-name $STACK_NAME \
      --stack-policy-body $POLICY_FILE_CONTENTS
  fi
fi

# report status
if [ -z "$POLICY_FILE_NAME" ]; then
  VERSION=$(cat $CLOUDFORMATION_FILE.sorted | sha1sum | cut -d' ' -f1)
else
  VERSION=$(cat $CLOUDFORMATION_FILE.sorted $POLICY_FILE.sorted | sha1sum | cut -d' ' -f1)
fi
jq -n "{version: {sha1: \"$VERSION\"}, metadata: []}" >&3
